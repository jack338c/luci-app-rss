#!/bin/sh /etc/rc.common
#
# Copyright (C) 2017 openwrt-ssr
# Copyright (C) 2017 yushi studio <ywb94@qq.com>
#
# This is free software, licensed under the GNU General Public License v3.
# See /LICENSE for more information.
#

START=90
STOP=15

SERVICE_DAEMONIZE=1
NAME=shadowsocksr
EXTRA_COMMANDS=rules
CONFIG_FILE=/var/etc/${NAME}.json
CONFIG_UDP_FILE=/var/etc/${NAME}_u.json
CONFIG_SOCK5_FILE=/var/etc/${NAME}_s.json
server_count=0
redir_tcp=0
redir_udp=0
tunnel_enable=0
local_enable=0
kcp_enable_flag=0
kcp_flag=0
gfw_enable=0
dns_enable_flag=0
switch_enable=0
switch_server=$1


uci_get_by_name() {
	local ret=$(uci get $NAME.$1.$2 2>/dev/null)
	echo ${ret:=$3}
}

uci_get_by_type() {
	local ret=$(uci get $NAME.@$1[0].$2 2>/dev/null)
	echo ${ret:=$3}
}




gen_config_file() {

         local host=$(uci_get_by_name $1 server)
	  echo "$(date): 解析服务器地址:$host" 
         if echo $host|grep -E "^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$">/dev/null; then         
        	hostip=${host}
       	elif  [ "$host" != "${host#*:[0-9a-fA-F]}" ] ;then
		hostip=${host}
         else
         	hostip=`ping ${host} -s 1 -c 1 | grep PING | cut -d'(' -f 2 | cut -d')' -f1`
         	if echo $hostip|grep -E "^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$">/dev/null; then
         		hostip=${hostip}
         	else
         		hostip=${host}
         	fi
         fi
         [ $2 = "0" -a  $kcp_flag = "1" ] && hostip="127.0.0.1"
         if [ $2 = "0" ] ;then
        	config_file=$CONFIG_FILE
         elif [ $2 = "1" ]; then
        	config_file=$CONFIG_UDP_FILE
         else
      	  	config_file=$CONFIG_SOCK5_FILE
         fi
         if [ $(uci_get_by_name $1 fast_open) = "1" ] ;then
         	fastopen="true";
         else
         	fastopen="false";
         fi
	  cat <<-EOF >$config_file
		{
		    
		    "server": "$hostip",
		    "server_port": $(uci_get_by_name $1 server_port),
		    "local_address": "0.0.0.0",
		    "local_port": $(uci_get_by_name $1 local_port),
		    "password": "$(uci_get_by_name $1 password)",
		    "timeout": $(uci_get_by_name $1 timeout 60),
		    "method": "$(uci_get_by_name $1 encrypt_method)",
		    "protocol": "$(uci_get_by_name $1 protocol)",
		    "obfs": "$(uci_get_by_name $1 obfs)",
		    "obfs_param": "$(uci_get_by_name $1 obfs_param)",
		    "fast_open": $fastopen
		}
EOF
}

get_arg_out() {
	case "$(uci_get_by_type access_control router_proxy 1)" in
		1) echo "-o";;
		2) echo "-O";;
	esac
}

start_rules() {
 	
	echo "$(date): udp_server:$udp_server" 
       /etc/init.d/ipset.sh start
   	echo "$(date): 开始加载防火墙规则..."     
 	IPSET_CH="china"
	IPSET_GFW="gfwlist"
	IPSET_CHN="chnroute"
	IPSET_CDN="cdn"
	IPSET_HOME="cnhome"
	ipset -! create $IPSET_GFW nethash && ipset flush $IPSET_GFW
	ipset -! create $IPSET_CDN iphash && ipset flush $IPSET_CDN
	sed -e "s/^/add $IPSET_GFW &/g" /etc/gfwlist/custom | awk '{print $0} END{print "COMMIT"}' | ipset -R
	sed -e "s/^/add $IPSET_CDN &/g" /etc/gfwlist/whiteip | awk '{print $0} END{print "COMMIT"}' | ipset -R
	iptables -t nat -N SHADOWSOCKS
	iptables -t nat -I PREROUTING -p tcp -j SHADOWSOCKS
	iptables -t nat -A SHADOWSOCKS -d 0.0.0.0/8 -j RETURN
	iptables -t nat -A SHADOWSOCKS -d 10.0.0.0/8 -j RETURN
	iptables -t nat -A SHADOWSOCKS -d 127.0.0.0/8 -j RETURN
	iptables -t nat -A SHADOWSOCKS -d 169.254.0.0/16 -j RETURN
	iptables -t nat -A SHADOWSOCKS -d 172.16.0.0/12 -j RETURN
	iptables -t nat -A SHADOWSOCKS -d 192.168.0.0/16 -j RETURN
	iptables -t nat -A SHADOWSOCKS -d 224.0.0.0/4 -j RETURN
	iptables -t nat -A SHADOWSOCKS -d 240.0.0.0/4 -j RETURN
 	[ ! -z "$server" ] && iptables -t nat -A SHADOWSOCKS -d $server -j RETURN
	iptables -t nat -N SHADOWSOCKS_GLO
	iptables -t nat -A SHADOWSOCKS_GLO -p tcp -j REDIRECT --to $(uci_get_by_name $GLOBAL_SERVER local_port)
	iptables -t nat -N SHADOWSOCKS_GFW
	iptables -t nat -A SHADOWSOCKS_GFW -p tcp -m set --match-set $IPSET_GFW dst -m set ! --match-set $IPSET_CDN dst -j REDIRECT --to $(uci_get_by_name $GLOBAL_SERVER local_port)
	iptables -t nat -N SHADOWSOCKS_CHN
	iptables -t nat -A SHADOWSOCKS_CHN -p tcp -m set --match-set $IPSET_GFW dst -j REDIRECT --to $(uci_get_by_name $GLOBAL_SERVER local_port)
	iptables -t nat -A SHADOWSOCKS_CHN -p tcp -m set ! --match-set $IPSET_CDN dst -m set ! --match-set $IPSET_CH dst -j REDIRECT --to $(uci_get_by_name $GLOBAL_SERVER local_port)
	iptables -t nat -A OUTPUT -p tcp -m set --match-set $IPSET_GFW dst -j REDIRECT --to-ports $(uci_get_by_name $GLOBAL_SERVER local_port)
	iptables -t nat -N SHADOWSOCKS_GAM
    	iptables -t nat -A SHADOWSOCKS_GAM -p tcp -m set ! --match-set $IPSET_CDN dst  -m  set ! --match-set  $IPSET_CH dst  -j REDIRECT --to $(uci_get_by_name $GLOBAL_SERVER local_port)
	ip rule add fwmark 0x01/0x01 table 310 pref 789
	ip route add local 0.0.0.0/0 dev lo table 310
	iptables -t mangle -N SHADOWSOCKS
	iptables -t mangle -I PREROUTING -p udp -j SHADOWSOCKS
	iptables -t mangle -A SHADOWSOCKS -d 0.0.0.0/8 -j RETURN
	iptables -t mangle -A SHADOWSOCKS -d 10.0.0.0/8 -j RETURN
	iptables -t mangle -A SHADOWSOCKS -d 127.0.0.0/8 -j RETURN
	iptables -t mangle -A SHADOWSOCKS -d 169.254.0.0/16 -j RETURN
	iptables -t mangle -A SHADOWSOCKS -d 172.16.0.0/12 -j RETURN
	iptables -t mangle -A SHADOWSOCKS -d 192.168.0.0/16 -j RETURN
	iptables -t mangle -A SHADOWSOCKS -d 224.0.0.0/4 -j RETURN
	iptables -t mangle -A SHADOWSOCKS -d 240.0.0.0/4 -j RETURN
	[ -n "$udp_server" ] && iptables -t mangle -A SHADOWSOCKS -d $udp_server -j RETURN
	#iptables -t mangle -A SHADOWSOCKS -p udp -j RETURN
	iptables -t mangle -N SHADOWSOCKS_GAM
	iptables -t mangle -A SHADOWSOCKS_GAM -p udp -m set --match-set $IPSET_GFW dst -j TPROXY --on-port $(uci_get_by_name $GLOBAL_SERVER local_port) --tproxy-mark 0x01/0x01
	iptables -t mangle -A SHADOWSOCKS_GAM -p udp -m set ! --match-set $IPSET_CH dst -m  set ! --match-set  $IPSET_CH dst -j TPROXY --on-port $(uci_get_by_name $GLOBAL_SERVER local_port) --tproxy-mark 0x01/0x01
	load_acl
	iptables -t nat -A SHADOWSOCKS -j $(get_action_chain $(uci_get_by_type global gfw_enable))
	[ "$(uci_get_by_type global gfw_enable)" == "gm" ] && iptables -t mangle -A SHADOWSOCKS -j $(get_action_chain $(uci_get_by_type global gfw_enable))
	return $?
}



load_acl(){
COUNTER=0
while true
do
	local acl_ipaddr=`uci get shadowsocksr.@lan_hosts[$COUNTER].host 2>/dev/null`
	local acl_proxy_mode=`uci get shadowsocksr.@lan_hosts[$COUNTER].type 2>/dev/null`
	local acl_ports=`uci get shadowsocksr.@lan_hosts[$COUNTER].ports 2>/dev/null`
	if [ -z "$acl_proxy_mode" ] && [ -z "$acl_ipaddr" ] && [ -z "$acl_ports" ] ; then
                  break
	fi
	iptables -t nat -A SHADOWSOCKS $(factor $acl_ipaddr "-s") $(factor $acl_ports "-p tcp -m multiport --dport") -$(get_jump_mode $acl_proxy_mode) $(get_action_chain $acl_proxy_mode)
	[ "$acl_proxy_mode" == "gm" ] && [ "$ARG_UDP" != "" ] && iptables -t mangle -A SHADOWSOCKS $(factor $acl_ipaddr "-s") $(factor $acl_ports "-p udp -m multiport --dport") -$(get_jump_mode $acl_proxy_mode) $(get_action_chain $acl_proxy_mode)
	COUNTER=$(($COUNTER+1))
done
}

factor(){
	if [ -z "$1" ] || [ -z "$2" ]; then
		echo ""
	else
		echo "$2 $1"
	fi
}

get_jump_mode(){
	case "$1" in
		disable)
			echo "j"
		;;
		*)
			echo "g"
		;;
	esac
}

clean_firewall_rule() {
  ib_nat_exist=`iptables -t nat -L PREROUTING | grep -c SHADOWSOCKS`
  if [ ! -z "$ib_nat_exist" ];then
     	until [ "$ib_nat_exist" = 0 ]
    	do 
       	iptables -t nat -D OUTPUT -p tcp -m set --match-set gfwlist dst -j REDIRECT --to-ports 1080 2>/dev/null
       	iptables -t nat -D PREROUTING -p tcp -j SHADOWSOCKS 2>/dev/null
       	iptables -t nat -D PREROUTING  -p udp --dport 53 -j DNAT --to $lanip 2>/dev/null
       	iptables -t mangle -D PREROUTING -p udp -j SHADOWSOCKS 2>/dev/null
       	ib_nat_exist=`expr $ib_nat_exist - 1`
  	done
  fi
}

del_firewall_rule() {
	clean_firewall_rule
	iptables -t nat -F china 2>/dev/null && iptables -t nat -X china 2>/dev/null
	iptables -t nat -F SHADOWSOCKS 2>/dev/null && iptables -t nat -X SHADOWSOCKS 2>/dev/null
	iptables -t nat -F SHADOWSOCKS_GLO 2>/dev/null && iptables -t nat -X SHADOWSOCKS_GLO 2>/dev/null
	iptables -t nat -F SHADOWSOCKS_GFW 2>/dev/null && iptables -t nat -X SHADOWSOCKS_GFW 2>/dev/null
	iptables -t nat -F SHADOWSOCKS_CHN 2>/dev/null && iptables -t nat -X SHADOWSOCKS_CHN 2>/dev/null
	iptables -t nat -F SHADOWSOCKS_GAM 2>/dev/null && iptables -t nat -X SHADOWSOCKS_GAM 2>/dev/null
	iptables -t nat -F SHADOWSOCKS_HOME 2>/dev/null && iptables -t nat -X SHADOWSOCKS_HOME 2>/dev/null
	iptables -t mangle -F SHADOWSOCKS 2>/dev/null && iptables -t mangle -X SHADOWSOCKS 2>/dev/null
	iptables -t mangle -F SHADOWSOCKS_GAM 2>/dev/null && iptables -t mangle -X SHADOWSOCKS_GAM 2>/dev/null
	remove_fwmark_rule 2>/dev/null
	ip route del local 0.0.0.0/0 table 310 2>/dev/null
}


get_action_chain() {
	case "$1" in
		disable)
			echo "RETURN"
		;;
		global)
			echo "SHADOWSOCKS_GLO"
		;;
		gfw)
			echo "SHADOWSOCKS_GFW"
		;;
		router)
			echo "SHADOWSOCKS_CHN"
		;;
		gm)
			echo "SHADOWSOCKS_GAM"
		;;
		returnhome)
			echo "SHADOWSOCKS_HOME"
		;;
	esac
}



start_pdnsd() {
	local usr_dns="$1"
	local usr_port="$2"
  
	local tcp_dns_list="208.67.222.222, 208.67.220.220"
	[ -z "$usr_dns" ] && usr_dns="8.8.8.8"
	[ -z "$usr_port" ] && usr_port="53"
	mkdir -p /var/etc /var/pdnsd
	
  if ! test -f "/var/pdnsd/pdnsd.cache"; then
	dd if=/dev/zero of="/var/pdnsd/pdnsd.cache" bs=1 count=4 2> /dev/null
	chown -R nobody.nogroup /var/pdnsd
	fi
	
	cat > /var/etc/pdnsd.conf <<EOF
global {
	cache_dir="/var/pdnsd";
	pid_file = /var/run/pdnsd.pid;
	run_as="nobody";
	server_ip = 0.0.0.0;
	server_port = 1053;
	status_ctl = on;
	query_method = tcp_only;
	min_ttl=24h;
	max_ttl=1w;
	timeout=10;
	neg_domain_pol=on;
	proc_limit=2;
	procq_limit=8;
}
server {
	label= "ssr-usrdns";
	ip = $usr_dns;
	port = $usr_port;
	timeout=6;
	uptest=none;
	interval=10m;
	purge_cache=off;
}
server {
	label= "ssr-pdnsd";
	ip = $tcp_dns_list;
	port = 5353;
	timeout=6;
	uptest=none;
	interval=10m;
	purge_cache=off;
}
EOF

	/usr/sbin/pdnsd -c /var/etc/pdnsd.conf -d



}

start_redir() {
	mkdir -p /var/run /var/etc
	UDP_RELAY_SERVER=$(uci_get_by_type global udp_relay_server)
	serverr=$(uci_get_by_name $GLOBAL_SERVER server)
       if [ "$UDP_RELAY_SERVER" = "" ] ;then
		ARG_UDP=""
	else
		if [ "$UDP_RELAY_SERVER" = "$GLOBAL_SERVER" ] || [ "$UDP_RELAY_SERVER" = "same" ] ;then
			ARG_UDP="-u"
			udp_server=$(uci_get_by_name $GLOBAL_SERVER server)
		else 
			ARG_UDP="-U"
			udp_server=$(uci_get_by_name $UDP_RELAY_SERVER server)
		fi
	fi
	gen_config_file $GLOBAL_SERVER 0
	redir_tcp=1
	local last_config_file=$CONFIG_FILE
	local pid_file="/var/run/ssr-retcp.pid"
	echo $ARG_UDP
	if [ "$ARG_UDP" = "-U" ]; then
		/usr/bin/ssr-redir \
			-c $CONFIG_FILE  \
			-f /var/run/ssr-retcp.pid
		
		
		gen_config_file $UDP_RELAY_SERVER 1
		last_config_file=$CONFIG_UDP_FILE
		pid_file="/var/run/ssr-reudp.pid"
		redir_udp=1
	fi
	/usr/bin/ssr-redir \
		-c $last_config_file  $ARG_UDP \
		-f $pid_file
		
}



add_dnsmasq(){

 	echo "$(date): 选择DNS解析模式"
	local mode=$(uci_get_by_type global dns_enable)
	case $mode in
          	1)
			echo "$(date): DNS解析模式:pdnsd"
			local dnsstr="$(uci_get_by_type global tunnel_forward 8.8.4.4:53)"
			local dnsserver=`echo "$dnsstr"|awk -F ':'  '{print $1}'`
			local dnsport=`echo "$dnsstr"|awk -F ':'  '{print $2}'`
			ipset add gfwlist $dnsserver 2>/dev/null
			start_pdnsd $dnsserver $dnsport
 			dns_enable_flag=4
		;;
		0)
			echo "$(date): DNS解析模式:ssr_tunnel"
 			service_start /usr/bin/ssr-tunnel -c $CONFIG_FILE -b 0.0.0.0 -u -l 1053 -L $(uci_get_by_type global tunnel_forward 8.8.4.4:53) -f /var/run/ssr-dns.pid
			dns_enable_flag=1
		;;
		2)
			echo "$(date): DNS解析模式:Pcap_DNSProxy"
			sed -i '/conf-dir/d' /etc/dnsmasq.conf 
			sed -i '/server=/d' /etc/dnsmasq.conf 	
			echo "no-resolv" >> /etc/dnsmasq.conf
			echo "no-poll" >> /etc/dnsmasq.conf
			echo "domain-needed" >> /etc/dnsmasq.conf
			echo "no-negcache" >> /etc/dnsmasq.conf
			echo "server=127.0.0.1#1053" >> /etc/dnsmasq.conf
              
			/usr/sbin/Pcap_DNSProxy \
				-c /etc/pcap-dnsproxy
			dns_enable_flag=3
		;;
		3)
			echo "$(date): DNS解析模式:dns2socks"
	  		/usr/bin/ssr-local \
			-c $CONFIG_FILE \
			-l $(uci_get_by_type socks5_proxy local_port 1080) \
			-f /var/run/ssr-local.pid
			/usr/bin/dns2socks \
				127.0.0.1:$(uci_get_by_type socks5_proxy local_port) \
				$(uci_get_by_type global tunnel_forward 8.8.4.4:53) \
				127.0.0.1:1053 \
				>/dev/null 2>&1 &
			dns_enable_flag=2
		;;

         esac


	if [ ! -f "/tmp/dnsmasq.d/gfwlist.conf" ];then
		ln -s /etc/dnsmasq.d/gfwlist.conf /tmp/dnsmasq.d/gfwlist.conf
	fi
	if [ ! -f "/tmp/dnsmasq.d/custom.conf" ];then
		cat /etc/gfwlist/gfwlist | awk '{print "server=/"$1"/127.0.0.1#1053\nipset=/"$1"/gfwlist"}' >> /tmp/dnsmasq.d/custom.conf
	fi
	if [ ! -f "/tmp/dnsmasq.d/sscdn.conf" ];then
		cat /etc/dnsmasq.d/cdn.conf | sed "s/^/ipset=&\/./g" | sed "s/$/\/&cdn/g" | sort | awk '{if ($0!=line) print;line=$0}' >/tmp/dnsmasq.d/sscdn.conf
	fi
	userconf=$(grep -c "" /etc/dnsmasq.d/user.conf)
	if [ $userconf -gt 0  ];then
 		ln -s /etc/dnsmasq.d/user.conf /tmp/dnsmasq.d/user.conf
	fi


	echo "$(date): 重启Dnsmasq。。。"
	/etc/init.d/dnsmasq restart 
}


start_tunnel() {
	/usr/bin/ssr-tunnel \
		-c $CONFIG_FILE  ${ARG_UDP:="-u"} \
		-l $(uci_get_by_type global tunnel_port 5300) \
		-L $(uci_get_by_type global tunnel_forward 8.8.4.4:53) \
		-f /var/run/ssr-tunnel.pid
	tunnel_enable=1	
	return $?
}
start_local() {
	local local_server=$(uci_get_by_type socks5_proxy server)
	[ "$local_server" = "nil" ] && return 1
	mkdir -p /var/run /var/etc
	gen_config_file $local_server 2
	/usr/bin/ssr-local -c $CONFIG_SOCK5_FILE -u  \
		-l $(uci_get_by_type socks5_proxy local_port 1080) \
		-f /var/run/ssr-local.pid
	local_enable=1	
}


start() { 
	stop
	GLOBAL_SERVER=$(uci_get_by_type global global_server)
	[ "$GLOBAL_SERVER" = "nil" ] && return 1
	iptables -t nat -C PREROUTING -p tcp -j SHADOWSOCKS 2>/dev/null && [ $? -eq 0 ] && exit 0;
	start_redir
	add_dnsmasq
	start_rules
	if [ "$(uci_get_by_type global enable_switch)" = "1" ] && [ "$(uci_get_by_name $GLOBAL_SERVER switch_enable)" = "1" ] && [ -z "$switch_server" ] ;then
		service_start /usr/share/shadowsocksr/ssr-switch start 60 5
		switch_enable=1
	fi

	if [ $(uci_get_by_type global monitor_enable) = 1 ] ;then
		service_start /usr/share/shadowsocksr/ssr-monitor $server_count $redir_tcp $redir_udp $tunnel_enable $kcp_enable_flag $local_enable $dns_enable_flag $switch_enable
	fi
       set_update
	
}

stop() {

 	del_firewall_rule
	ipset -F cdn >/dev/null 2>&1 &
  	ipset -X cdn >/dev/null 2>&1 &
	ipset -F china >/dev/null 2>&1 &
  	ipset -X cdina >/dev/null 2>&1 &
	ipset -F local >/dev/null 2>&1 &
   	ipset -X local >/dev/null 2>&1 &	
   	ipset -F gfwlist >/dev/null 2>&1 &
   	ipset -X gfwlist >/dev/null 2>&1 &	
	/etc/init.d/ipset.sh stop

	killall -q -9 ssr-monitor
	if [ -z "$switch_server" ] ;then
		killall -q -9 ssr-switch
	fi
	killall -q -9 ssr-redir
	killall -q -9 ssr-tunnel
	killall -q -9 ssr-local
	killall -q  pdnsd
	icount=`ps -w  | grep Pcap_DNSProxy |grep -v grep| wc -l`
	if [ $icount -ge 1 ] ;then
		sed -i '/no-resolv/d' /etc/dnsmasq.conf
		sed -i '/no-poll/d' /etc/dnsmasq.conf
		sed -i '/domain-needed/d' /etc/dnsmasq.conf
		sed -i '/no-negcache/d' /etc/dnsmasq.conf
		sed -i '/server=127.0.0.1#1053/d' /etc/dnsmasq.conf
		sed -i '/all-servers/d' /etc/dnsmasq.conf
		killall -q -9 Pcap_DNSProxy  
              /etc/init.d/sdns start
	fi
                    
        killall -q -9 dns2socks
        stop_update
}
stop_update() {
   sed -i '/updategfwlist/d' /etc/crontabs/root >/dev/null 2>&1 &
   sed -i '/update_chinaroute.sh/d' /etc/crontabs/root >/dev/null 2>&1 &
}

set_update() {


if [ ! -e "/usr/share/shadowsocksr/updategfwlist.sh" ];then
cat  >/usr/share/shadowsocksr/updategfwlist.sh  <<EOF
#!/bin/sh
wget-ssl --no-check-certificate https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt -O /tmp/gfw.b64
 if [ "\$?" == "0" ]; then
         /usr/share/shadowsocksr/ssr-gfw
         icunt=\$(cat /tmp/gfwnew.txt | wc -l)
         icunt1=\$(cat /etc/dnsmasq.ssr/gfw_list.conf | wc -l)
              if [ "\$icunt" != "\$icunt1" ];then
                           cp -f /tmp/gfwnew.txt /etc/dnsmasq.ssr/gfw_list.conf
              fi
fi
rm -rf  /tmp/gfwnew.txt
rm -rf  /tmp/china_ssr.txt
rm -rf  /tmp/gfw.b64
EOF
chmod +x /usr/share/shadowsocksr/updategfwlist.sh
fi



autoupdate=$(uci_get_by_type global auto_update)
weekupdate=$(uci_get_by_type global week_update)
dayupdate=$(uci_get_by_type global time_update)
if [ "$autoupdate" = "1" ];then
  if [ "$weekupdate" = "7" ];then
      echo "0 $dayupdate * * * /usr/share/shadowsocksr/updategfwlist.sh" >> /etc/crontabs/root
      echo "0 $dayupdate * * * /usr/share/shadowsocksr/update_chinaroute.sh" >> /etc/crontabs/root
   else
      echo "0 $dayupdate * * $weekupdate /usr/share/shadowsocksr/updategfwlist.sh" >> /etc/crontabs/root
      echo "0 $dayupdate * * $weekupdate /usr/share/shadowsocksr/update_chinaroute.sh" >> /etc/crontabs/root
   fi
else
  stop_update
fi
}

boot() {

  (sleep $(uci_get_by_type global dalay_time) && start >/dev/null 2>&1) &
   start

  return 0
}








